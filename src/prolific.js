// Generated by CoffeeScript 1.6.3
var prolific;

prolific = (function() {
  function prolific() {
    var args, get_arguments, get_matcher, getters, matchers, pre_actions, run_matcher, schema, timer;
    schema = [];
    args = [];
    timer = 0;
    matchers = {
      "is greater|lower than": {
        reg: /(.+) is (greater|lower|>|<) than (.+)/,
        get: "$1,$3",
        "var": "$2",
        act: function() {
          var _ref, _ref1;
          if (((_ref = this.cond) === "greater" || _ref === ">") && (args[0] <= args[1] || args[0] > args[1] == false)) {
            throw Error(arguments[0] + " (" + args[0] + ") is not greater than " + arguments[1] + " (" + args[1] + ")");
          }
          if (((_ref1 = this.cond) === "lower" || _ref1 === "<") && (args[0] >= args[1] || args[0] < args[1] == false)) {
            throw Error(arguments[0] + " (" + args[0] + ") is not lower than " + arguments[1] + " (" + args[1] + ")");
          }
        }
      },
      "is|isnt an element": {
        reg: /(.+) (is|isnt) an (element)$/,
        get: "$1",
        "var": "$2",
        act: function() {
          if (args[0].size() === 0 && this.cond === "is") {
            throw Error(args[0] + " is not an element");
          }
          if (args[0].size() > 0 && this.cond === "isnt") {
            throw Error(args[0] + " is an element");
          }
        }
      },
      "is|isnt": {
        reg: /(.+) (is|isnt) (?!(greater than|lower than))(.+)/,
        get: "$1,$4",
        "var": "$2",
        act: function() {
          var res, testVal;
          if (schema[0].getter === "jquery") {
            res = args[0].is(args[1]) === true;
          } else {
            res = args[0] === args[1];
          }
          testVal = this.cond === "isnt";
          if (res === testVal) {
            throw Error(schema[0].argument + " is|not equal to " + schema[1].argument);
          }
        }
      }
    };
    getters = {
      math: {
        reg: /\(([0-9-+./\*\(\)]+)\)/,
        get: "$1",
        act: function(what) {
          eval("var v = " + what);
          return v;
        }
      },
      "var": {
        reg: /(var )()/,
        get: "$2",
        act: function(what) {
          var e;
          try {
            eval("var v = " + what);
          } catch (_error) {
            e = _error;
            if (e.message.indexOf("undefined" > -1)) {
              return void 0;
            }
            if (e.message.indexOf("null" > -1)) {
              return null;
            }
          }
          return v;
        }
      },
      reserved: {
        reg: /(null|undefined|false|true)/,
        get: "$1",
        act: function(what) {
          if (what === "undefined") {
            return void 0;
          }
          if (what === "null") {
            return null;
          }
          if (what === "false") {
            return false;
          }
          if (what === "true") {
            return true;
          }
        }
      },
      string: {
        reg: /^'(.+)'/,
        get: "$1",
        act: function(w) {
          return w;
        }
      },
      number: {
        reg: /^([0-9.]+)$/,
        get: "$1",
        act: function(w) {
          return parseFloat(w, 10);
        }
      },
      jquery: {
        reg: /^\$\(["'](.+)["']\)$/,
        get: "$1",
        act: function(q) {
          return $(q);
        }
      },
      generic: {
        reg: "",
        get: "",
        act: function() {
          return arguments[0];
        }
      }
    };
    get_arguments = function() {
      var argument, getter, gname, index, _args, _i, _len;
      _args = [];
      for (index = _i = 0, _len = arguments.length; _i < _len; index = ++_i) {
        argument = arguments[index];
        for (gname in getters) {
          getter = getters[gname];
          if (_args.length === index) {
            if (argument.match(new RegExp(getter.reg))) {
              _args.push(getter.act.apply(this, argument.replace(getter.reg, getter.get).split(",")));
              schema.push({
                getter: gname,
                value: _args[_args.length - 1],
                argument: argument
              });
            }
          }
        }
        if (_args.length === index) {
          _args.push(argument);
          schema.push({
            getter: getters.generic,
            value: argument,
            argument: argument
          });
        }
      }
      return _args;
    };
    get_matcher = function(assertion) {
      var matcher, mname;
      for (mname in matchers) {
        matcher = matchers[mname];
        if (!(assertion.match(new RegExp(matcher.reg)))) {
          continue;
        }
        if (matcher["var"] != null) {
          matcher.cond = assertion.replace(matcher.reg, matcher["var"]);
        }
        return matcher;
      }
    };
    run_matcher = function(matcher, assertion) {
      args = get_arguments.apply(this, assertion.replace(matcher.reg, matcher.get).split(","));
      return matcher.act();
    };
    pre_actions = function(assertions) {
      var match;
      if (assertions.match(new RegExp(/in ([\d.]+) seconds/))) {
        match = assertions.match(/in ([\d.]+) seconds/);
        timer = parseFloat(match[1], 10);
        assertions = assertions.replace(match[0], "").trim();
      }
      return assertions.split(" and ");
    };
    this.test = function(assertions) {
      var assertion, matcher, _i, _len, _results,
        _this = this;
      assertions = pre_actions(assertions);
      _results = [];
      for (_i = 0, _len = assertions.length; _i < _len; _i++) {
        assertion = assertions[_i];
        matcher = get_matcher(assertion);
        console.log("timer", timer);
        if (timer !== 0) {
          waits(timer * 1000);
          runs(function() {
            return run_matcher(matcher, assertion);
          });
        } else {
          run_matcher(matcher, assertion);
        }
        if (matcher === null) {
          throw Error("Can't find any test around '" + assertion + "'");
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    this.getArguments = get_arguments;
    this.getMatcher = get_matcher;
    this.matchers = matchers;
  }

  return prolific;

})();

window.assume = function(assertion) {
  return new prolific().test(assertion);
};
