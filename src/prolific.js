// Generated by CoffeeScript 1.6.3
var prolific,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

prolific = (function() {
  var _this = this;

  function prolific() {
    this.fail = __bind(this.fail, this);
    this.test = __bind(this.test, this);
    this.pre_actions = __bind(this.pre_actions, this);
    this.run_matcher = __bind(this.run_matcher, this);
    this.get_arguments = __bind(this.get_arguments, this);
    this.finder = __bind(this.finder, this);
  }

  prolific.prototype._assertions = null;

  prolific.prototype.schema = [];

  prolific.prototype.args = [];

  prolific.prototype.timer = 0;

  prolific.prototype.sentencer = {
    "timer": {
      reg: /^in ([\d.]+) seconds (.+)$/,
      get: "$1,$2",
      act: function(conf) {
        prolific.timer = parseFloat(conf.subjects[0], 10);
        return prolific._assertions = conf.subjects[1];
      }
    },
    "and|or": {
      reg: /(.+) (and|or) (.+)/,
      get: "$1,$3",
      "var": "$2",
      act: function() {
        return prolific._assertions = prolific._assertions.split(" and ");
      }
    }
  };

  prolific.prototype.matchers = {
    "method has been called": {
      reg: /^method (.+) (is called)( with |)(.+|)$/,
      get: "$1",
      "var": "$2,$3,$4",
      act: function(conf) {
        var _m, _t;
        _t = conf.subjects[0].split(".");
        _m = _t.pop();
        eval("var _o = " + _t.join("."));
        spyOn(_o, _m);
        if (this.options == null) {
          throw Error("You must pass a function to execute to test if a method is called");
        }
        this.options.call(this);
        if (conf.vars[1] === "") {
          return expect(eval(conf.subjects[0])).toHaveBeenCalled();
        } else {
          return expect(eval(conf.subjects[0])).toHaveBeenCalledWith(eval(conf.vars[2]));
        }
      }
    },
    "is greater|lower than": {
      reg: /(.+) is (greater|lower|>|<) than (.+)/,
      get: "$1,$3",
      "var": "$2",
      err: function(conf) {
        var _ref;
        return this.args[0] + " is " + ((_ref = conf.vars[0]) === "greater" || _ref === ">" ? "lower" : "greater") + " than " + this.args[1];
      },
      act: function(conf) {
        var num, _i, _len, _ref, _ref1, _ref2;
        _ref = this.args;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          num = _ref[_i];
          if (isNaN(num)) {
            prolific.fail(conf, num + " is not a number");
          }
        }
        if (((_ref1 = conf.vars[0]) === "greater" || _ref1 === ">") && (this.args[0] <= this.args[1] || this.args[0] > this.args[1] == false)) {
          this.fail(conf);
        }
        if (((_ref2 = conf.vars[0]) === "lower" || _ref2 === "<") && (this.args[0] >= this.args[1] || this.args[0] < this.args[1] == false)) {
          return this.fail(conf);
        }
      }
    },
    "is|isnt an element": {
      reg: /(.+) (is|isnt) an (element)$/,
      get: "$1",
      "var": "$2",
      act: function(conf) {
        console.log("conf", conf, "args", this.args);
        if (this.args[0].size() === 0 && conf.vars[0] === "is") {
          return this.fail(conf);
        }
      }
    },
    "on event": {
      reg: /^on ([a-z]+) (.+) then (.+)$/,
      get: "$3",
      "var": "$1,$2",
      act: function(conf) {
        var new_prolific;
        new_prolific = new prolific;
        if (conf.subjects[0].indexOf("method") === 0) {
          return new_prolific.test(conf.subjects[0], function() {
            return $(conf.vars[1]).trigger(conf.vars[0]);
          });
        } else {
          $(conf.vars[1]).trigger(conf.vars[0]);
          return new_prolific.test(conf.subjects[0], this.options);
        }
      }
    },
    "is|isnt": {
      reg: /(.+) (is|isnt) (?!(greater than|lower than|called))(.+)/,
      get: "$1,$4",
      "var": "$2",
      err: function(conf) {
        return this.args[0] + (conf.vars[0] === "is" ? " isnt " : " is ") + this.args[1];
      },
      act: function(conf) {
        var res, testVal;
        res = this.schema[0].name === "jquery" ? this.args[0].is(this.args[1]) === true : this.args[0] === this.args[1];
        testVal = conf.vars[0] === "isnt";
        if (res === testVal) {
          return this.fail(conf);
        }
      }
    }
  };

  prolific.prototype.getters = {
    math: {
      reg: /\(([0-9-+./\*\(\)]+)\)/,
      get: "$1",
      act: function(conf) {
        eval("var v = " + conf.subjects[0]);
        return v;
      }
    },
    "var": {
      reg: /(var )()/,
      get: "$2",
      act: function(conf) {
        var e;
        try {
          eval("var v = " + conf.subjects[0]);
          return v;
        } catch (_error) {
          e = _error;
          if (e.message.indexOf("undefined" > -1)) {
            return void 0;
          }
          if (e.message.indexOf("null" > -1)) {
            return null;
          }
        }
      }
    },
    reserved: {
      reg: /(null|undefined|false|true)/,
      get: "$1",
      act: function(conf) {
        if (conf.subjects[0] === "undefined") {
          return void 0;
        }
        if (conf.subjects[0] === "null") {
          return null;
        }
        if (conf.subjects[0] === "false") {
          return false;
        }
        if (conf.subjects[0] === "true") {
          return true;
        }
      }
    },
    string: {
      reg: /^'(.+)'/,
      get: "$1",
      act: function(conf) {
        return conf.subjects[0];
      }
    },
    number: {
      reg: /^([0-9.]+)$/,
      get: "$1",
      act: function(conf) {
        return parseFloat(conf.subjects[0], 10);
      }
    },
    jquery: {
      reg: /^\$\(["'](.+)["']\)$/,
      get: "$1",
      act: function(conf) {
        return $(conf.subjects[0]);
      }
    },
    generic: {
      reg: "",
      get: "",
      act: function(conf) {
        return conf.subjects[0];
      }
    }
  };

  /*
  Arguments: where (string), what (array of matchers objects), callback (optional, function), multiple (boolean)
  "multiple" argument require a callback
  */


  prolific.prototype.finder = function(where, what, callback, multiple) {
    var a, b, found;
    for (a in what) {
      b = what[a];
      if (!(where.match(new RegExp(b.reg)))) {
        continue;
      }
      found = {
        source: where,
        subjects: where.replace(b.reg, b.get).split(","),
        name: a,
        item: b
      };
      if (b["var"] != null) {
        found.vars = where.replace(b.reg, b["var"]).split(",");
      }
      if (multiple !== true) {
        break;
      } else {
        callback(found);
      }
    }
    if ((callback != null) && callback !== false && multiple !== true) {
      return callback(found);
    } else {
      return found;
    }
  };

  prolific.prototype.get_arguments = function() {
    var argument, index, _args, _i, _len,
      _this = this;
    _args = [];
    for (index = _i = 0, _len = arguments.length; _i < _len; index = ++_i) {
      argument = arguments[index];
      this.finder(argument, this.getters, function(found) {
        var arg;
        if (found === void 0) {
          arg = argument;
        } else {
          arg = found.item.act(found);
        }
        _args.push(arg);
        return _this.schema[index] = found;
      });
    }
    return _args;
  };

  prolific.prototype.run_matcher = function(matcherObj) {
    this.args = this.get_arguments.apply(this, matcherObj.subjects);
    return matcherObj.item.act.call(this, matcherObj);
  };

  prolific.prototype.pre_actions = function() {
    var _this = this;
    this.finder(this._assertions, this.sentencer, function(conf) {
      return _this._assertions = conf.item.act(conf);
    }, true);
    if (typeof this._assertions === "string") {
      return this._assertions = [this._assertions];
    }
  };

  prolific.prototype.test = function(assumptions, options) {
    var assertion, matcherObj, _i, _len, _ref,
      _this = this;
    this.options = options;
    this._assertions = assumptions;
    this.pre_actions();
    _ref = this._assertions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      assertion = _ref[_i];
      matcherObj = this.finder(assertion, this.matchers);
      if (this.timer > 0) {
        waits(this.timer * 1000);
      }
      runs(function() {
        return _this.run_matcher.call(_this, matcherObj);
      });
    }
    if (matcherObj === null) {
      throw Error("Can't find any test");
    }
  };

  prolific.prototype.fail = function(err, params) {
    var errstr;
    errstr = "Expetation '" + err.source + "' is not met";
    if (params != null) {
      errstr += " (" + params + ")";
    }
    if (err.item.err != null) {
      errstr += " (" + err.item.err(err) + ")";
    }
    throw Error(errstr);
  };

  return prolific;

}).call(this);

beforeEach(function() {
  var _this = this;
  return window.assume = function(assumptions, options) {
    var _prol;
    _prol = new prolific;
    return runs(function() {
      return _prol.test.call(this, assumptions, options);
    });
  };
});
